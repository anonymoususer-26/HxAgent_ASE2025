from dataset.task_factory import TaskFactory
from error import CannotOpenTaskError

ORDER = ['first', 'second', 'third']
GENERAL_SEARCH_KEY = [
    "funny shark videos",
    "funny cat videos",
    "funny dog videos",
    "funny monkey videos",
    "funny dolphin videos",
    "funny turtle videos",
    "funny animals videos",
    "funny human videos",
    "funny birds videos",
    "funny fish videos",
    "cooking recipes",
    "coding challenges",
    "coding interview",
    "coding bootcamp",
    "data visualization with Python",
    "data visualization with JavaScript",
    "data analysis with Python",
    "machine learning for beginners",
    "data science projects for beginners",
    "machine learning projects for beginners",
    "data science competitions",
    "machine learning competitions",
    "programming language comparison",
    "software development tutorials",
    "coding challenges for beginners",
    "web development tutorial",
    "game development tutorial",
    "software design principles",
    "coding interview questions and answers",
    "data structures and algorithms",
    "open source projects",
    "contributing to open source",
    "coding communities",
    "developer productivity tips",
    "software design patterns",
    "front-end development tutorial",
    "full-stack development tutorial",
    "responsive web design tutorial",
]
YOUTUBE_CHANNEL = [
    "PewDiePie",
    "Dude Perfect",
    "MrBeast",
    "Markiplier",
    "JennaMarbles",
    "Jacksepticeye",
    "VanossGaming",
    "DanTDM",
    "Liza Koshy",
    "David Dobrik",
    "James Charles",
    "Casey Neistat",
    "Jeffree Star",
    "Emma Chamberlain",
    "Shane Dawson TV",
    "The ACE Family",
    "Joey Graceffa",
    "Ryan Higa",
    "Zoella",
    "Tati",
    "Bethany Mota",
    "Superwoman",
    "Roman Atwood",
    "NigaHiga",
    "Smosh",
    "Tyler Oakley",
    "KSI",
    "Philip DeFranco",
    "Grace Helbig",
    "GMM",
    "The Try Guys",
    "Rhett and Link",
    "Cocomelon - Nursery Rhymes",
    "Smosh Games",
    "Good Mythical MORE",
    "CinemaSins",
    "Vsauce",
    "H3H3 Productions",
    "Vox",
    "BuzzFeedVideo",
    "T-Series",
    "5-Minute Crafts",
    "Pencilmation",
    "Luisito Comunica",
    "FBE",
    "Dobre Brothers",
    "Wassabi Productions",
    "Team Edge",
    "CoryxKenshin",
    "The Game Theorists",
    "Guava Juice",
    "Jake Paul",
    "Logan Paul",
    "Family Fun Pack",
    "RomanAtwoodVlogs",
    "GloZell Green",
    "LaurenzSide",
    "MatPat's Game Lab",
    "Miranda Sings",
    "Brooklyn and Bailey",
    "Rosanna Pansino",
    "Brave Wilderness",
    "Epic Rap Battles",
    "MyLifeAsEva",
    "Simply Nailogical",
    "JoJo Siwa",
    "Kandee Johnson",
    "Ethan and Hila",
    "Gabbie Hanna",
    "CrankThatFrank",
    "TheOdd1sOut",
    "Lucas the Spider",
    "Binging with Babish",
    "Troom Troom",
    "Veritasium",
    "Marques Brownlee",
    "Linus Tech Tips",
    "Jake Roper",
    "Vsauce2",
    "Vsauce3",
    "Kurzgesagt – In a Nutshell",
    "MinutePhysics",
    "Computerphile",
    "Tom Scott",
    "Captain Disillusion",
    "Numberphile",
    "Scott Manley",
    "BBC Earth",
    "TED-Ed",
    "The School of Life",
    "CrashCourse",
    "Wisecrack",
    "NowThis Nerd",
    "Vat19",
    "MinuteEarth",
    "Joe Scott",
    "Half as Interesting",
    "Up and Atom",
    "Simon Clark",
    "PBS Space Time",
    "It's Okay To Be Smart"
]
YOUTUBE_MUSIC_VIDEO = [
    "Ed Sheeran - Shape of You (Official Music Video)",
    "Luis Fonsi - Despacito ft. Daddy Yankee (Official Music Video)",
    "Wiz Khalifa - See You Again ft. Charlie Puth [Official Music Video] Furious 7 Soundtrack",
    "Mark Ronson - Uptown Funk (Official Music Video) ft. Bruno Mars",
    "PSY - GANGNAM STYLE(강남스타일) M/V",
    "Justin Bieber - Baby ft. Ludacris (Official Music Video)",
    "Katy Perry - Roar (Official Music Video)",
    "Maroon 5 - Sugar (Official Music Video)",
    "Taylor Swift - Shake It Off",
    "The Chainsmokers - Closer (Lyric) ft. Halsey",
    "Bruno Mars - That’s What I Like (Official Music Video)",
    "Calvin Harris - This Is What You Came For (Official Video) ft. Rihanna",
    "Adele - Hello",
    "Taylor Swift - Blank Space",
    "Katy Perry - Dark Horse (Official) ft. Juicy J",
    "Sia - Chandelier (Official Music Video)",
    "Shakira - Waka Waka (This Time for Africa) (The Official 2010 FIFA World Cup™ Song)",
    "Cardi B - Bodak Yellow [OFFICIAL MUSIC VIDEO]",
    "Dua Lipa - New Rules (Official Music Video)",
    "The Weeknd - Starboy ft. Daft Punk (Official Video)",
    "Meghan Trainor - All About That Bass (Official Music Video)",
    "Clean Bandit - Rockabye (feat. Sean Paul & Anne-Marie) [Official Video]",
    "Nicki Minaj - Anaconda",
    "twenty one pilots - Stressed Out (Official Video)",
    "Ariana Grande - Side To Side ft. Nicki Minaj",
    "Rihanna - Diamonds",
    "LMFAO - Party Rock Anthem ft. Lauren Bennett, GoonRock",
    "Sam Smith - Too Good At Goodbyes (Official Video)",
    "Camila Cabello - Havana ft. Young Thug",
    "Drake - Hotline Bling",
    "Shawn Mendes - Stitches (Official Video)",
    "Coldplay - Hymn For The Weekend (Official Video)",
    "Justin Timberlake - CAN'T STOP THE FEELING! (From DreamWorks Animation's \"Trolls\") (Official Video)",
    "Major Lazer & DJ Snake - Lean On (feat. MØ) (Official Music Video)",
    "Post Malone - Rockstar ft. 21 Savage (Official Audio)",
    "Jason Derulo - Swalla (feat. Nicki Minaj & Ty Dolla $ign) (Official Music Video)",
    "Avicii - Wake Me Up (Official Video)",
    "Marshmello - Alone (Official Music Video)",
    "David Guetta - Titanium ft. Sia (Official Video)",
    "Imagine Dragons - Thunder",
    "Alan Walker - Faded",
    "Lorde - Royals (US Version)",
    "Zedd, Alessia Cara - Stay (Official Lyric Video)",
    "Meghan Trainor - NO",
    "Charlie Puth - We Don't Talk Anymore (feat. Selena Gomez) [Official Video]",
    "Ellie Goulding - Love Me Like You Do (Official Video)",
    "OneRepublic - Counting Stars",
    "Beyoncé - Single Ladies (Put a Ring on It) (Video Version)",
    "The Weeknd - Can't Feel My Face",
    "Kygo - Firestone ft. Conrad Sewell (Official Video)",
    "Flo Rida - Whistle [Official Video]",
    "Rae Sremmurd - Black Beatles ft. Gucci Mane",
    "Nicky Jam x J. Balvin - X (EQUIS) | Video Oficial | Prod. Afro Bros & Jeon",
    "Silentó - Watch Me (Whip/Nae Nae) (Official Music Video)",
    "Charlie Puth - Attention [Official Video]",
    "DJ Snake - Taki Taki ft. Selena Gomez, Ozuna, Cardi B",
    "Jonas Brothers - Sucker",
    "BLACKPINK - 'Kill This Love' M/V",
    "Billie Eilish - bad guy",
    "Taylor Swift - You Belong With Me",
    "Demi Lovato - Sorry Not Sorry",
    "Panic! At The Disco - High Hopes (Official Video)",
    "Macklemore & Ryan Lewis - Thrift Shop feat. Wanz (Official Video)",
    "5 Seconds of Summer - She Looks So Perfect",
    "G-Eazy & Kehlani - Good Life (from The Fate of the Furious: The Album) [MUSIC VIDEO]",
    "Shawn Mendes, Camila Cabello - Señorita",
    "Jonas Blue - Perfect Strangers ft. JP Cooper (Official Video)",
    "MAGIC! - Rude (Official Music Video)",
    "Marshmello & Anne-Marie - FRIENDS (Music Video) *OFFICIAL FRIENDZONE ANTHEM*",
    "Khalid - Young Dumb & Broke (Official Video)",
    "Bebe Rexha - Meant to Be (feat. Florida Georgia Line) [Official Music Video]",
    "Charlie Puth - One Call Away [Official Video]",
    "Rita Ora - Anywhere (Official Video)",
    "Jessie J, Ariana Grande, Nicki Minaj - Bang Bang ft. Ariana Grande, Nicki Minaj",
    "Jonas Brothers - Only Human",
    "David Guetta & Sia - Flames (Official Video)",
    "ZAYN - Dusk Till Dawn ft. Sia (Official Music Video)",
    "Cardi B, Bad Bunny & J Balvin - I Like It [Official Music Video]",
    "Avicii - Levels",
    "Silk City, Dua Lipa - Electricity (Official Video) ft. Diplo, Mark Ronson",
    "Natti Natasha x Ozuna - Criminal [Official Video]",
    "J. Balvin, Willy William - Mi Gente (Official Video)",
    "Taylor Swift - Love Story",
    "Justin Bieber - Sorry (PURPOSE : The Movement)",
    "Ariana Grande - thank u, next",
    "DJ Khaled - I'm The One ft. Justin Bieber, Quavo, Chance the Rapper, Lil Wayne",
    "Ed Sheeran - Perfect (Official Music Video)",
    "Miley Cyrus - Wrecking Ball (Official Video)",
    "The Weeknd - The Hills",
    "Lady Gaga - Bad Romance (Official Music Video)",
    "Sam Smith - Stay With Me",
    "Nicki Minaj - Super Bass",
    "Jason Derulo - Swalla (feat. Nicki Minaj & Ty Dolla $ign) (Official Music Video)",
    "Halsey - Without Me",
    "The Chainsmokers - Don't Let Me Down ft. Daya (Official Music Video)",
    "Fifth Harmony - Work from Home ft. Ty Dolla $ign",
    "Lil Nas X - Old Town Road (Official Video) ft. Billy Ray Cyrus",
    "Selena Gomez, Marshmello - Wolves",
    "Imagine Dragons - Believer",
    "Chris Brown - Loyal (Official Video) ft. Lil Wayne, Tyga",
    "ZAYN, Taylor Swift - I Don’t Wanna Live Forever (Fifty Shades Darker)",
    "Ariana Grande - Break Free ft. Zedd",
    "DNCE - Cake By The Ocean",
    "Katy Perry - Firework (Official)",
    "Justin Bieber - What Do You Mean? (Official Music Video)",
    "Liam Payne, Rita Ora - For You (Fifty Shades Freed)",
    "Meghan Trainor - Me Too",
    "Martin Garrix - Animals (Official Video)",
    "One Direction - What Makes You Beautiful (Official Video)",
    "Selena Gomez - Come & Get It",
    "P!nk - Just Give Me A Reason ft. Nate Ruess",
    "Adele - Rolling in the Deep",
    "Zedd, Maren Morris, Grey - The Middle (Official Music Video)",
    "Calvin Harris, Dua Lipa - One Kiss (Official Video)",
    "Hozier - Take Me To Church (Official Video)",
    "The Chainsmokers & Coldplay - Something Just Like This (Lyric)",
    "Migos - Bad and Boujee ft Lil Uzi Vert [Official Video]",
    "The Weeknd - Blinding Lights (Official Video)",
    "Rihanna - We Found Love ft. Calvin Harris",
    "Marshmello ft. Bastille - Happier (Official Music Video)",
    "Luis Fonsi, Demi Lovato - Échame La Culpa (Video Oficial)",
    "Kygo, Selena Gomez - It Ain't Me (Official Video)",
    "David Guetta, Bebe Rexha & J Balvin - Say My Name (Official Video)",
    "ZAYN - PILLOWTALK (Official Music Video)",
    "Ariana Grande - 7 rings",
    "Sam Smith - I'm Not The Only One",
    "Imagine Dragons - Radioactive",
    "Billie Eilish - bury a friend",
    "Shawn Mendes - Treat You Better",
    "Major Lazer - Cold Water"
]
CAPTION = [
    "Thank you for sharing!",
    "Great job!",
    "Well done!",
    "Awesome!",
    "You nailed it!",
    "Fantastic work!",
    "Bravo!",
    "Amazing!",
    "I'm impressed!",
    "Excellent!",
    "You've got it!",
    "Perfect!",
    "Outstanding!",
    "Superb!",
    "Wonderful!",
    "You're incredible!",
    "Kudos to you!",
    "I appreciate your effort!",
    "Terrific!",
    "Keep up the good work!",
    "You're doing great!",
    "I'm proud of you!",
    "That's fantastic!",
    "You're a star!",
    "You're a genius!",
    "Well said!",
    "Impressive stuff!",
    "You're a rockstar!",
    "Spot on!",
    "You're the best!"
]
YOUTUBE_LANGUAGE = [
    "Spanish",
    "French",
    "German",
    "Portuguese",
    "Russian",
    "Japanese",
    "Korean",
    "Arabic",
    "Turkish",
    "Thai",
    "Vietnamese",
    "Indonesian",
    "Italian",
    "Dutch",
    "Polish",
    "Romanian",
    "Greek",
    "Czech",
    "Hungarian",
    "Swedish",
    "Danish",
    "Finnish",
    "Norwegian",
    "Hebrew",
    "Hindi",
    "Malay",
    "Filipino"
]
YOUTUBE_TAB = ['Home', 'Shorts', 'Subscriptions', 'Your Channel', 'History', 'Playlists', 'Your videos', 'Watch later', 'Liked videos', 'Trending', 'Music', 'Gaming', 'News', 'Sports']
JOB_TITLE = [
    "Software Engineer",
    "Data Scientist",
    "Product Manager",
    "Marketing Manager",
    "Business Analyst",
    "Financial Analyst",
    "Human Resources Manager",
    "Sales Manager",
    "Operations Manager",
    "Project Manager",
    "Account Manager",
    "Customer Success Manager",
    "UX/UI Designer",
    "Graphic Designer",
    "Content Writer",
    "Digital Marketing Specialist",
    "SEO Specialist",
    "Social Media Manager",
    "Software Developer",
    "Web Developer",
    "Full Stack Developer",
    "Frontend Developer",
    "Backend Developer",
    "DevOps Engineer",
    "IT Support Specialist",
    "Network Engineer",
    "Cloud Architect",
    "Database Administrator",
    "Quality Assurance Engineer",
    "Machine Learning Engineer",
    "AI Specialist",
    "Cybersecurity Analyst",
    "Data Engineer",
    "Financial Advisor",
    "Investment Analyst",
    "Legal Counsel",
    "Medical Doctor",
    "Nurse Practitioner",
    "Pharmacist",
    "Dentist",
    "Teacher",
    "Professor",
    "Research Scientist",
    "Operations Analyst",
    "Supply Chain Manager",
    "Logistics Coordinator",
    "Real Estate Agent",
    "Interior Designer",
    "Event Planner",
    "Chef"
]
ENTREPRENEUR = [
    "Jeff Weiner",
    "Satya Nadella",
    "Sheryl Sandberg",
    "Reid Hoffman",
    "Daniel Ek",
    "Tim Cook",
    "Indra Nooyi",
    "Brian Chesky",
    "Mark Zuckerberg",
    "Jack Dorsey",
    "Ginni Rometty",
    "Sundar Pichai",
    "Larry Page",
    "Sergey Brin",
    "Marissa Mayer",
    "Meg Whitman",
    "Richard Branson",
    "Tony Robbins",
    "Gary Vaynerchuk",
    "Bill Gates",
    "Warren Buffett",
    "Angela Merkel",
    "Malala Yousafzai",
    "J.K. Rowling",
    "Angela Ahrendts",
    "Mary Barra",
    "Greta Thunberg",
    "Christine Lagarde",
    "Jacinda Ardern",
    "Klaus Schwab",
    "Bob Iger",
    "Marc Benioff",
    "Brian Moynihan",
    "Jean Liu",
    "Alfred Kelly",
    "Daniel Zhang",
    "David Zaslav",
    "Doug McMillon",
    "Hubert Joly",
    "Jack Ma",
    "Jamie Dimon",
    "Jensen Huang",
    "Jeff Bezos",
    "Jes Staley",
    "Jim Farley",
    "Jim Hackett",
    "John Donovan",
    "Kevin Johnson",
    "Lisa Su"
]
COMPANY = [
    "Amazon",
    "Facebook",
    "Nord Security",
    "Siemens AG",
    "Audible",
    "American Express.",
    "Pluralsight",
    "MetLife",
    "Kraken",
    "Synopsys Inc.",
    "MongoDB",
    "Roblox",
    "Stack Overflow",
    "Crossover",
    "Thermo Fisher Scientific Careers",
    "Warner Bros. Discovery",
    "Procter & Gamble",
    "Bloomberg",
    "RELEX Solutions",
    "DISH",
    "JPMorgan Chase & Co.",
    "Belden Inc.",
    "National Security Agency",
    "Paylocity",
    "IT Sonix Custom Development GmbH",
    "Coder Technologies, Inc.",
    "S&P Global",
    "ASML",
    "ING Deutschland",
    "Statkraft",
    "Volvo Group",
    "CGI (Canada)",
    "Equinor",
    "Novo Nordisk A/S"
]
NAME = [
    "John", "Jane", "Jim", "Ann", "Tom", "Amy", "Ben", "Eva", "Sam", "Kate",
    "Luke", "Sara", "Max", "Liz", "Dan", "Zoe", "Leo", "Liv", "Ray", "Mia",
    "Alex", "Beth", "Rob", "Tina", "Jake", "Lia", "Chris", "Nia", "Matt", "Ella",
    "Mark", "Jill", "Josh", "Liv", "Paul", "Maya", "Sean", "Jen", "Nick", "Ria",
    "Ryan", "Elle", "Greg", "Ivy", "Eric", "Kim", "Phil", "Ana", "Will", "Amy",
    "Dave", "Fay", "Drew", "Sky", "Tim", "Tess", "Mike", "Joy", "Carl", "Nina",
    "Dean", "Eve", "Fred", "Liv", "Harry", "Jade", "Scott", "Mae", "Tony", "Nia",
    "Vic", "Lena", "Neil", "Tara", "Owen", "Bree", "Jake", "Gia", "Ray", "Lea",
    "Zack", "Eva", "Ian", "Sue", "Joel", "Cara", "Lee", "Mae", "Todd", "Zoe"
]
FACEBOOK_TAB = ['Friends', 'Video', 'Marketplace', 'Groups', 'Saved', 'Memories']
VOCAB = [
    "acquiesce",
    "ambiguous",
    "antediluvian",
    "apocryphal",
    "apropos",
    "audacious",
    "behemoth",
    "bifurcate",
    "calumny",
    "castigate",
    "chicanery",
    "circumlocution",
    "complicit",
    "concomitant",
    "consanguinity",
    "convoluted",
    "decorum",
    "desuetude",
    "diatribe",
    "diffident",
    "egregious",
    "elegy",
    "elicit",
    "empirical",
    "ephemeral",
    "equanimity",
    "equivocate",
    "erudite",
    "esoteric",
    "euphemism",
    "exacerbate",
    "exiguous",
    "expatiate",
    "facetious",
    "fallacious",
    "felicitous",
    "ferment",
    "fulminate",
    "germane",
    "gratuitous",
    "hauteur",
    "iconoclast",
    "idiosyncratic",
    "impecunious",
    "imperious",
    "impetuous",
    "inchoate",
    "incorporeal",
    "indelible",
    "inscrutable",
    "insidious",
    "insolent",
    "interminable",
    "intimation",
    "intrepid",
    "invective",
    "inveterate",
    "irresolute",
    "juxtapose",
    "lacuna",
    "laconic",
    "limpid",
    "machiavellian",
    "maladroit",
    "malapropism",
    "melee",
    "mendacious",
    "mercurial",
    "meteoric",
    "misconstrue",
    "mitigate",
    "murky",
    "nadir",
    "necromancy",
    "obsequious",
    "obfuscate",
    "obtuse",
    "opprobrium",
    "ornate",
    "ostentatious",
    "paradigm",
    "paradox",
    "pariah",
    "penchant",
    "peremptory",
    "perfidious",
]
GENERAL_PRODUCT = [
    "phone case",
    "gift card",
    "batteries",
    "light bulbs",
    "books",
    "movies",
    "music",
    "computer accessories (mouse, keyboard)",
    "phone charger",
    "headphones",
    "coffee",
    "tea",
    "spices",
    "pasta",
    "rice",
    "cereal",
    "canned goods",
    "cleaning supplies",
    "personal care items (shampoo, soap)",
    " razors",
    "makeup",
    "pain relievers",
    "vitamins",
    "bandages",
    "adhesive tape",
    "desk supplies (pens, paper)",
    "art supplies",
    "party decorations",
    "greeting cards",
    "gift wrap",
    "toys",
    "pet food",
    "plants",
    "seeds",
    "gardening tools",
    "home decor items (vases, picture frames)",
    "light bulbs",
    "light fixtures",
    "batteries",
    "tools (hammer, screwdriver)",
    "extension cord",
    "power strip",
    "electronics cables",
    "USB drives",
    "phone mounts",
    "travel adapters",
    "sunglasses",
    "hats",
    "scarves",
    "jewelry",
    "watches",
    "clothing (t-shirts, socks)",
    "shoes",
    "athletic wear",
    "workout equipment",
    "kitchen gadgets",
    "storage containers",
    "water bottles",
    "travel mugs",
    "kitchen towels",
    "oven mitts",
    "spatulas",
    "coffee filters",
    "aluminum foil",
    "plastic wrap",
    "trash bags",
    "greeting cards",
    "gift wrap",
    "batteries",
    "phone case",
    "books",
    "art supplies",
    "desk lamp",
    "houseplants",
    "board games",
    "phone charger",
    "computer mouse",
    "travel mug",
    "workout clothes",
    " spices",
    "pasta sauce",
    "cereal",
    "canned soup",
    "laundry detergent",
    "dish soap",
    "paper towels",
    "toilet paper",
    "facial tissues",
    "trash bags",
    "gift cards",
    "coffee",
    "tea",
    "batteries",
    "light bulbs",
    "phone case",
    "books",
    "desk supplies",
    "art supplies",
    "toys",
    "pet food",
    "cleaning supplies",
    "pain relievers",
    "bandages",
    "gift wrap",
    "greeting cards",
    " phone charger",
    "computer mouse",
    "travel mug",
    "workout clothes",
    " spices",
    "pasta sauce",
    "cereal",
    "canned soup",
    "laundry detergent",
    "dish soap",
    "paper towels",
    "toilet paper",
    "facial tissues",
    "trash bags",
]
NEWS_EVENT = [
    "Scientists discover new species of deep-sea fish.",
    "Political unrest in country X leads to protests.",
    "Company Y announces record profits for the year.",
    "Major breakthrough in cancer research reported.",
    "Celebrity Z ties the knot in a private ceremony.",
    "New COVID-19 variant detected in several countries.",
    "SpaceX successfully launches mission to Mars.",
    "Historic peace agreement signed between nations A and B.",
    "World leaders gather for climate change summit.",
    "Olympic Games postponed due to pandemic.",
    "Economic downturn predicted by financial experts.",
    "New technology allows for faster internet speeds.",
    "Movie director wins prestigious award for latest film.",
    "Artificial intelligence reaches new milestone.",
    "Wildfires devastate region C, prompting evacuations.",
    "Renowned author releases highly anticipated novel.",
    "UNESCO declares site D as a World Heritage Site.",
    "Virtual reality becomes more mainstream in education.",
    "Stock market experiences largest single-day drop in years.",
    "Humanitarian crisis unfolds in conflict zone E.",
    "Pop star launches charitable foundation.",
    "Researchers find potential treatment for Alzheimer's.",
    "Renewable energy surpasses fossil fuels in country F.",
    "New regulations aim to curb plastic pollution.",
    "Pandemic forces schools to adopt remote learning.",
    "Archaeologists uncover ancient city ruins.",
    "Violent storms cause widespread damage in region G.",
    "Tech giant unveils groundbreaking new device.",
    "Local community rallies to support wildfire victims.",
    "Famous landmark undergoes extensive restoration.",
    "Art exhibit attracts record number of visitors.",
    "Space telescope captures images of distant galaxy.",
    "Government imposes new tax policies.",
    "Medical breakthrough offers hope for rare disease.",
    "Controversial law sparks debate across the nation.",
    "Music festival cancelled due to safety concerns.",
    "New business venture promises innovative solutions.",
    "Fashion designer launches eco-friendly clothing line.",
    "Tropical cyclone hits coastal communities.",
    "Actor accused of financial misconduct.",
    "Food shortage crisis escalates in region H.",
    "New archaeological find challenges historical beliefs.",
    "Start-up company becomes billion-dollar unicorn.",
    "Renowned chef opens new restaurant in city center.",
    "Fashion week showcases latest trends.",
    "Environmental activists protest outside parliament.",
    "Virtual conference attracts global participants.",
    "Annual charity event raises record funds.",
    "Local artist creates mural celebrating diversity.",
    "City council approves ambitious urban renewal project.",
    "Technology outage disrupts services nationwide.",
    "Sports team wins championship after decades.",
    "Historical document discovered in library archives.",
    "Award-winning actor announces retirement.",
    "Medical personnel strike over working conditions.",
    "New education policy aims to reform curriculum.",
    "Automaker recalls millions of vehicles.",
    "Philanthropist donates record amount to charity.",
    "Legal battle over landmark conservation intensifies.",
    "Government unveils plan for affordable housing.",
    "Biotech company develops promising COVID-19 vaccine.",
    "Celebrity chef launches cooking show.",
    "Political scandal rocks administration.",
    "New art installation sparks controversy.",
    "Tech conference showcases latest innovations.",
    "Renowned musician releases comeback album.",
    "Major airline expands routes to new destinations.",
    "Researchers warn of impending environmental disaster.",
    "Youth-led climate protest gains international attention.",
    "Court ruling sets precedent for future cases.",
    "Security breach exposes sensitive data.",
    "Economic summit focuses on global recovery.",
    "Legendary athlete breaks world record.",
    "Medical institute receives prestigious research grant.",
    "Museum exhibition celebrates local history.",
    "Tech start-up acquired by industry giant.",
    "Festival celebrates cultural diversity.",
    "Natural disaster relief efforts receive international aid.",
    "New wildlife sanctuary established.",
    "Movie studio announces slate of upcoming films.",
    "Space agency plans mission to explore asteroid.",
    "Educational program reaches underserved communities.",
    "Fashion icon launches luxury perfume line.",
    "Health experts warn of emerging health threat.",
    "High-profile trial captivates public interest.",
    "City inaugurates new public transportation system.",
    "Researchers discover ancient artifacts underwater.",
    "Social media platform introduces new features.",
    "Renowned author's manuscript found after decades.",
    "Innovative startup wins prestigious entrepreneurship award.",
    "Historic building reopens after extensive renovation.",
    "New sports league gains popularity.",
    "Environmentalist wins Nobel Prize for advocacy work."
]
BOOKS = [
    "To Kill a Mockingbird",
    "1984",
    "The Great Gatsby",
    "Pride and Prejudice",
    "The Catcher in the Rye",
    "Harry Potter and the Philosopher's Stone",
    "The Hobbit",
    "Fahrenheit 451",
    "The Lord of the Rings",
    "Jane Eyre",
    "Animal Farm",
    "The Da Vinci Code",
    "Wuthering Heights",
    "Brave New World",
    "The Little Prince",
    "Catch-22",
    "The Adventures of Sherlock Holmes",
    "Moby-Dick",
    "The Picture of Dorian Gray",
    "War and Peace",
    "Gone with the Wind",
    "The Grapes of Wrath",
    "The Hitchhiker's Guide to the Galaxy",
    "A Tale of Two Cities",
    "The Road",
    "The Chronicles of Narnia",
    "Frankenstein",
    "Dracula",
    "Alice's Adventures in Wonderland",
    "The Bell Jar",
    "The Sun Also Rises",
    "Crime and Punishment",
    "One Hundred Years of Solitude",
    "The Name of the Rose",
    "Anna Karenina",
    "Lord of the Flies",
    "Slaughterhouse-Five",
    "Beloved",
    "Les Misérables",
    "The Odyssey",
    "The Divine Comedy",
    "Don Quixote",
    "Pippi Longstocking",
    "The Secret Garden",
    "The Wind in the Willows",
    "The Stand",
    "The Alchemist",
    "The Road Less Traveled",
    "The Old Man and the Sea",
    "The Girl with the Dragon Tattoo",
    "A Clockwork Orange",
    "The Shadow of the Wind",
    "Charlotte's Web",
    "The Color Purple",
    "The Shining",
    "Watership Down",
    "The Poisonwood Bible",
    "The Handmaid's Tale",
    "The Kite Runner",
    "Middlemarch",
    "The Outsiders",
    "The Curious Incident of the Dog in the Night-Time",
    "The Book Thief",
    "The Hunger Games",
    "Dune",
    "Jurassic Park",
    "Life of Pi",
    "Ender's Game",
    "The Martian",
    "The Help",
    "Room",
    "The Goldfinch",
    "Where the Crawdads Sing",
    "Educated",
    "Crazy Rich Asians",
    "Becoming",
    "Little Fires Everywhere",
    "The Night Circus",
    "The Silent Patient",
    "The Tattooist of Auschwitz",
    "The Water Dancer",
    "The Testaments",
    "The Vanishing Half",
    "The Midnight Library",
    "The Song of Achilles",
    "The Seven Husbands of Evelyn Hugo",
    "Pachinko",
    "The House in the Cerulean Sea",
    "Where the Forest Meets the Stars",
    "The Giver of Stars",
    "The Dutch House",
    "Normal People",
    "Such a Fun Age",
    "The Starless Sea",
    "The Guest List",
    "American Dirt",
    "Big Summer",
    "The Pull of the Stars",
    "The Glass Hotel",
    "The Mirror and the Light",
    "Deacon King Kong",
    "The Authenticity Project",
    "Anxious People",
    "The Invisible Life of Addie LaRue"
]
FMCG_PRODUCT = [
    "Body Lotion",
    "Moisturizing Cream",
    "Shaving Gel",
    "In-Shower Body Lotion",
    "Body Wash",
    "Oil-Free Moisturizing Cream",
    "Men's Body Wash",
    "Facial Cleanser",
    "Sunscreen",
    "Lip Balm",
    "Hand Cream",
    "Anti-Wrinkle Cream",
    "Eye Cream",
    "Cleansing Wipes",
    "Deodorant",
    "Body Milk",
    "Sensitive Skin Shaving Gel",
    "Q10 Plus Firming Body Lotion",
    "Cocoa Butter Body Lotion",
    "Aloe Vera Body Lotion",
    "Hydrating Face Mask",
    "Refreshing Toner",
    "Micellar Water",
    "Daily Essentials Face Cream",
    "Body Oil",
    "Body Souffle",
    "Exfoliating Scrub",
    "Hydrating Serum",
    "Body Butter",
    "Cellulite Cream",
    "Refreshing Gel",
    "Intensive Moisture Body Cream",
    "Refreshing Face Wash",
    "After Shave Balm",
    "Caring Shower Cream",
    "Nourishing Body Milk",
    "Revitalizing Shampoo",
    "Balancing Toner",
    "Regenerating Night Cream",
    "Sun Protection Spray",
    "Soothing Day Cream",
    "Firming Body Oil",
    "Cooling Post Shave Balm",
    "Pore Minimizing Toner",
    "Hydrating BB Cream",
    "Gentle Eye Makeup Remover",
    "Body Whitening Cream"
]
ELECTRONIC_PRODUCT = [
    "Apple iPhone",
    "Samsung Galaxy Phone",
    "Apple iPad",
    "Amazon Kindle",
    "Dell Laptop",
    "HP Printer",
    "Canon DSLR Camera",
    "Sony Mirrorless Camera",
    "Bose Headphones",
    "Sony Noise-Canceling Headphones",
    "Fitbit Fitness Tracker",
    "Garmin GPS Watch",
    "Amazon Echo",
    "Google Nest Thermostat",
    "Ring Video Doorbell",
    "Roomba Robot Vacuum",
    "Dyson Vacuum Cleaner",
    "Philips Air Fryer",
    "Instant Pot Pressure Cooker",
    "Nespresso Coffee Machine",
    "Samsung 4K Smart TV",
    "LG OLED TV",
    "Sony PlayStation",
    "Microsoft Xbox",
    "Nintendo Switch",
    "Bose Soundbar",
    "Sonos Speaker",
    "GoPro Action Camera",
    "Logitech Wireless Mouse",
    "Razer Gaming Keyboard",
    "Anker Portable Charger",
    "JBL Bluetooth Speaker",
    "Beats Wireless Earphones",
    "Microsoft Surface Tablet",
    "Asus Gaming Monitor",
    "Corsair Gaming PC",
    "Linksys WiFi Router",
    "Netgear WiFi Range Extender",
    "TP-Link Smart Plug",
    "Eero Mesh WiFi System",
    "Apple AirPods",
    "Samsung Soundbar",
    "Canon Laser Printer",
    "Breville Espresso Machine",
    "Garmin Dash Cam",
    "Fitbit Smart Scale",
    "DJI Drone",
    "Epson Projector",
    "Microsoft Surface Dock",
    "Nintendo Switch Lite"
]
AMAZON_LANGUAGES = ['Spanish', 'Arabic', 'Korean', 'Portuguese', 'Chinese (simplified)', 'Chinese (traditional)']
US_ZIPCODE = [
    "10001", "20001", "30301", "60601", "90001",
    "10101", "20101", "30401", "60701", "90101",
    "10201", "20201", "30501", "60801", "90201",
    "10301", "20301", "30601", "60901", "90301",
    "10401", "20401", "30701", "61001", "90401",
    "10501", "20501", "30801", "61101", "90501",
    "10601", "20601", "30901", "61201", "90601",
    "10701", "20701", "31001", "61301", "90701",
    "10801", "20801", "31101", "61401", "90801",
    "10901", "20901", "31201", "61501", "90901"
]
AMAZON_TAB = ["Today's deal", "Customer service", "Registry", "Gift cards", "Sell"]
CELEBRITY = [
    "Frank Sinatra",
    "Elton John",
    "David Bowie",
    "Ray Charles",
    "Marvin Gaye",
    "The Beatles",
    "Rihanna",
    "Eminem",
    "Celine Dion",
    "Barbra Streisand",
    "Paul McCartney",
    "Madonna",
    "John Coltrane",
    "Nina Simone",
    "Bob Marley",
    "Led Zeppelin",
    "Pink Floyd",
    "Eagles",
    "The Rolling Stones",
    "Simon & Garfunkel",
    "ABBA",
    "Jimi Hendrix",
    "Prince",
    "Aerosmith",
    "Guns N' Roses",
    "Nirvana",
    "Radiohead",
    "Coldplay",
    "U2",
    "Lady Gaga",
    "Adele",
    "Bruno Mars",
    "Ed Sheeran",
    "Elvis Costello",
    "Patti Smith",
    "Dolly Parton",
    "Kenny Rogers",
    "Billie Holiday",
    "Sam Cooke",
    "Otis Redding"
]

METROPOTITANS = [
    "New York City",
    "London",
    "Paris",
    "Tokyo",
    "Los Angeles",
    "Chicago",
    "Dubai",
    "Singapore",
    "Hong Kong",
    "Sydney",
    "Bangkok",
    "Seoul",
    "Mumbai",
    "Delhi",
    "Shanghai",
    "Beijing",
    "Frankfurt",
    "Amsterdam",
    "Madrid",
    "Rome",
    "Toronto",
    "Vancouver",
    "Montreal",
    "Mexico City",
    "Sao Paulo",
    "Buenos Aires",
    "Johannesburg",
    "Cairo",
    "Istanbul",
    "Kuala Lumpur",
    "Jakarta",
    "Manila",
    "Melbourne",
    "Brisbane",
    "Perth",
    "Auckland",
    "Wellington",
    "Oslo",
    "Stockholm",
    "Copenhagen",
    "Helsinki",
    "Reykjavik",
    "Dublin",
    "Edinburgh",
    "Glasgow",
    "Berlin",
    "Munich",
    "Vienna",
    "Zurich"
]

SUBREDDITS = [
    "r/aww",
    "r/funny",
    "r/gaming",
    "r/pics",
    "r/videos",
    "r/news",
    "r/worldnews",
    "r/science",
    "r/technology",
    "r/music",
    "r/movies",
    "r/television",
    "r/books",
    "r/anime",
    "r/manga",
    "r/askreddit",
    "r/todayilearned",
    "r/mildlyinteresting",
    "r/nevertellmetheodds",
    "r/notlikeothergirls",
    "r/iamatotalpieceofshit",
    "r/antiwork",
    "r/wallstreetbets",
    "r/politics",
    "r/soccer",
    "r/nfl",
    "r/nba",
    "r/baseball",
    "r/hockey",
    "r/formula1",
    "r/fitness",
    "r/bodybuilding",
    "r/loseit",
    "r/cooking",
    "r/baking",
    "r/food",
    "r/travel",
    "r/photography",
    "r/art",
    "r/writing",
    "r/learnprogramming",
    "r/datascience",
    "r/machinelearning",
    "r/coding",
    "r/webdev",
    "r/gamedev",
    "r/philosophy",
    "r/psychology",
    "r/sociology"
]

QUESTIONS = [
    "What's the most efficient data structure for storing and retrieving billions of geolocation points for nearest neighbor searches?",
    "How can I efficiently find the shortest path between two nodes in a graph with negative edge weights and cycles?",
    "Can you optimize this Fibonacci sequence calculation using dynamic programming for larger inputs?",
    "What's the best collision resolution technique for a hash table storing millions of strings with similar prefixes?",
    "When is merge sort preferable to quicksort, and vice versa? Provide real-world examples.",
    "How can I create a custom Python decorator that profiles function execution time and automatically generates code optimizations?",
    "What's the best way to handle exceptions in asynchronous Python code using asyncio?",
    "How can I effectively use type hinting to improve code readability and maintainability in a large-scale project?",
    "What's the most Pythonic way to flatten a list of lists while preserving order and handling nested structures?",
    "Can you create a custom context manager for resource management in Python that provides additional features like logging and error handling?",
    "How can I optimize Pandas operations on large datasets for faster processing?",
    "What's the most efficient way to perform element-wise operations on two NumPy arrays of different shapes?",
    "How can I create interactive, 3D visualizations with Matplotlib that support zooming, panning, and tooltips?",
    "What are the key performance bottlenecks in Django applications, and how can they be addressed?",
    "What are the recommended patterns for structuring large Flask applications with multiple blueprints and complex logic?",
    "How can I effectively handle imbalanced datasets in machine learning classification problems?",
    "What are some creative feature engineering techniques for text data that can improve model performance?",
    "How can I efficiently tune hyperparameters for complex machine learning models using Bayesian optimization?",
    "Can you propose a novel deep learning architecture for a specific problem domain (e.g., natural language processing, image recognition)?",
    "How can I explain the predictions of a complex black-box model to non-technical stakeholders?",
    "What are the best practices for designing RESTful APIs that are scalable, maintainable, and easy to consume?",
    "How can I optimize web scraping performance while avoiding detection and respecting robots.txt?",
    "When is it beneficial to use asynchronous web frameworks like aiohttp or Tornado over synchronous frameworks like Flask or Django?",
    "What are the essential security measures to protect a web application from common vulnerabilities like SQL injection, cross-site scripting, and CSRF?",
    "How can I implement effective API rate limiting to prevent abuse and protect resources?",
    "How can I optimize physics simulations for real-time performance in game development?",
    "What techniques can be used to create intelligent and believable non-player characters in games?",
    "How can I generate procedurally generated game levels with variety and challenge?",
    "What are the most effective ways to optimize game performance for different platforms (PC, mobile, consoles)?",
    "How can I implement low-latency and reliable multiplayer gameplay over the internet?",
    "How can I use Python to simulate complex physical phenomena, such as fluid dynamics or quantum mechanics?",
    "What Python libraries and techniques are best suited for quantitative finance and risk modeling?",
    "How can I analyze and visualize biological data using Python libraries like Biopython and NumPy?",
    "How can I create interactive Python tutorials and exercises for teaching programming to beginners?",
    "What Python libraries can be used for generating creative visual art and designs?",
    "Write a Python script to generate random, realistic-looking text messages.",
    "Write a Python script to simulate a vending machine.",
    "Write a Python script to create a simple text-based adventure game.",
    "Write a Python script to implement a basic chatbot.",
    "Write a Python script to analyze social media data for sentiment analysis.",
    "How can I optimize the quicksort algorithm for best average-case performance?",
    "Design a data structure for efficiently storing and retrieving large amounts of time-series data.",
    "Design a scalable, distributed system for handling real-time data processing.",
    "Find the longest palindromic substring in a string.",
    "Implement a trie data structure.",
    "Solve the N-queens problem.",
    "Find the median of two sorted arrays.",
    "Generate all possible permutations of a string.",
    "What are the most promising developments in the Python ecosystem for the next 5 years?",
    "How can the Python community foster a more inclusive and welcoming environment for all developers?",
    "What are the most effective ways to teach Python to beginners, intermediate, and advanced programmers?",
    "How can Python be used to address global challenges like climate change, poverty, and healthcare?",
    "How has Python influenced other industries and disciplines?",
    "What's the funniest Python one-liner you can come up with?",
    "Share your best Python-related puns.",
    "Can you create a Python-themed meme?",
    "Write a short poem about Python.",
    "Create a Python-related riddle."
]

SOFSearchTerms = [
    "python list comprehension",
    "python dictionary",
    "python function",
    "python class",
    "python error handling",
    "python file handling",
    "python regular expressions",
    "python data analysis",
    "python machine learning",
    "python web development",
    "python pandas",
    "python numpy",
    "python matplotlib",
    "python django",
    "python flask",
    "python unit testing",
    "python debugging",
    "python performance optimization",
    "python multiprocessing",
    "python threading",
    "python asyncio",
    "python generators",
    "python decorators",
    "python metaclasses",
    "python modules",
    "python packages",
    "python virtual environments",
    "python pip",
    "python conda",
    "python IDE",
    "python code style",
    "python best practices",
    "python design patterns",
    "python data structures",
    "python algorithms",
    "python recursion",
    "python lambda functions",
    "python closures",
    "python iterators",
    "python comprehensions",
    "python generators",
    "python coroutines",
    "python asynchronous programming",
    "python concurrency",
    "python parallelism",
    "python databases",
    "python SQL",
    "python NoSQL",
    "python API",
    "python REST API",
    "python web scraping",
    "python data visualization",
    "python natural language processing",
    "python computer vision",
    "python deep learning",
    "python machine learning",
    "python data science",
    "python big data",
    "python cloud computing",
    "python DevOps",
    "python testing",
    "python debugging",
    "python profiling",
    "python code refactoring",
    "python code review",
    "python version control",
    "python git",
    "python collaboration",
    "python open source",
    "python community",
    "python learning resources",
    "python tutorials",
    "python books",
    "python courses",
    "python certifications",
    "python jobs",
    "python career",
]

FROM_DESTINATION = [
    "New York City", "London", "Paris", "Tokyo", "Los Angeles", "Chicago", "Dubai", "Singapore", "Hong Kong", "Sydney", "Bangkok", "Seoul", "Mumbai", "Delhi", "Shanghai", "Beijing", "Frankfurt", "Amsterdam", "Madrid", "Rome", "Toronto", "Vancouver", "Montreal", "Mexico City", "Sao Paulo", "Buenos Aires"
]

TO_DESTINATION = [
    "Johannesburg", "Cairo", "Istanbul", "Kuala Lumpur", "Jakarta", "Manila", "Melbourne", "Brisbane", "Perth", "Auckland", "Wellington", "Oslo", "Stockholm", "Copenhagen", "Helsinki", "Reykjavik", "Dublin", "Edinburgh", "Glasgow", "Berlin", "Munich", "Vienna", "Zurich"
]

FROM_DATE = [
    "January 10th", "February 15th"
]

TO_DATE = [
    "February 15th", "February 25th"
] 

EXPEDIA_TAB = [
    "Resort", "Spa", "Cabin", "Hot tub", "Pet friendly"
]

INSTAGRAM_PROFILE = [
    "edissprogramme"
]

popular_task_factories = [
    TaskFactory('youtube_1', 'https://youtube.com', 'Youtube', 'Search "{}" and like the first video', GENERAL_SEARCH_KEY),
    TaskFactory('youtube_2', 'https://youtube.com', 'Youtube', 'Search the channel {} and subscribe to their channel', YOUTUBE_CHANNEL),
    TaskFactory('youtube_3', 'https://youtube.com', 'Youtube', 'Go to Watch later section and click the {} video', ORDER),
    TaskFactory('youtube_4', 'https://youtube.com', 'Youtube', 'Change the site\'s current language setting to {}', YOUTUBE_LANGUAGE),
    TaskFactory('youtube_5', 'https://youtube.com', 'Youtube', 'Navigate to {} tab', YOUTUBE_TAB),
    TaskFactory('linkedin_1', 'https://linkedin.com', 'Linkedin', 'Login with username {} and password {}', ['abc@gmail.com'], ['123456789']),
    TaskFactory('linkedin_2', 'https://linkedin.com', 'Linkedin', 'Search for {} jobs and click on {} result', JOB_TITLE, ORDER),
    TaskFactory('linkedin_3', 'https://linkedin.com', 'Linkedin', 'Search for a person name {} and click connect or follow', ENTREPRENEUR),
    TaskFactory('linkedin_4', 'https://linkedin.com', 'Linkedin', 'Write a post with caption "{}"', CAPTION),
    TaskFactory('linkedin_5', 'https://linkedin.com', 'Linkedin', 'Search the job {} and Save the first job', JOB_TITLE),
    TaskFactory('facebook_1', 'https://facebook.com', 'Facebook', 'Login with username {} and password {}', ['abc@gmail.com'], ['123456789']),
    TaskFactory('facebook_2', 'https://facebook.com', 'Facebook', 'Update status with "{}"', CAPTION),
    TaskFactory('facebook_3', 'https://facebook.com', 'Facebook', 'Switch to {} tab', FACEBOOK_TAB),
    TaskFactory('facebook_4', 'https://facebook.com', 'Facebook', 'Search {} page and follow them', CELEBRITY),
    TaskFactory('facebook_5', 'https://facebook.com', 'Facebook', 'Search {} profile and like their latest post', CELEBRITY),
    TaskFactory('google_1', 'https://google.com', 'Google', 'Enter a search query "{}" and click on the {} result', GENERAL_SEARCH_KEY, ORDER),
    TaskFactory('google_2', 'https://google.com', 'Google', 'Search "{} meaning" and click to related link from Cambridge Dictionary', VOCAB),
    TaskFactory('google_3', 'https://google.com', 'Google', 'Search "{}", navigate to "Shop" section and click on the {} item', GENERAL_PRODUCT, ORDER),
    TaskFactory('google_4', 'https://google.com', 'Google', 'Search "{}" navigate to "News" section and click on the first article from the New York Times', NEWS_EVENT),
    TaskFactory('google_5', 'https://google.com', 'Google', 'Search for {} and navigate to "Images" tab', GENERAL_SEARCH_KEY),
    TaskFactory('amazon_1', 'https://amazon.com', 'Amazon', 'Search for "{}" and filter so that only products of the brand Nivea are included', FMCG_PRODUCT),
    TaskFactory('amazon_2', 'https://amazon.com', 'Amazon', 'Navigate to the "{}" section', AMAZON_TAB),
    TaskFactory('amazon_3', 'https://amazon.com', 'Amazon', 'Search for {} and add the first {} results to cart', GENERAL_PRODUCT, [2, 3]),
    TaskFactory('amazon_4', 'https://amazon.com', 'Amazon', 'Search for {} and filter the results to include used item only', ELECTRONIC_PRODUCT, [1, 2, 3]),
    TaskFactory('amazon_5', 'https://amazon.com', 'Amazon', 'Change the website language to {}', AMAZON_LANGUAGES),
    TaskFactory('stackoverflow_1', 'https://stackoverflow.com', 'Stack Overflow', 'Navigate to Discussion, create a discussion with title {}, please generate related tag and content (content must be a paragraph)', QUESTIONS),
    TaskFactory('stackoverflow_2', 'https://stackoverflow.com', 'Stack Overflow', 'Search for "{}" and click {} to the first result', SOFSearchTerms, ['upvote', 'downvote']),
    TaskFactory('stackoverflow_3', 'https://stackoverflow.com', 'Stack Overflow', 'Ask a question with title {}, please generate the details of the problem for input, describe what we have tried for input, but do not generate any tag and send the question to review', QUESTIONS),
    TaskFactory('stackoverflow_4', 'https://stackoverflow.com', 'Stack Overflow', 'Navigate to "Com                                                                    panies", search "{}" and click follow the first company', COMPANY),
    TaskFactory('stackoverflow_5', 'https://stackoverflow.com', 'Stack Overflow', 'Go to setting to edit profile and change Display name to {}', NAME),
    TaskFactory('expedia_1', 'https://www.expedia.com', 'Expedia', 'Search for a one way flight from {} to {} on {} and click the first result	', FROM_DESTINATION, TO_DESTINATION, FROM_DATE),
    TaskFactory('expedia_2', 'https://www.expedia.com', 'Expedia', 'Search for a stay in {} from {} to {}', FROM_DESTINATION, FROM_DATE, TO_DATE),
    TaskFactory('expedia_3', 'https://www.expedia.com', 'Expedia', 'Search for a round trip flight from {} to {}, departure date {}, return date {}', FROM_DESTINATION, TO_DESTINATION, FROM_DATE, TO_DATE),
    TaskFactory('expedia_4', 'https://www.expedia.com', 'Expedia', 'Click on {} and select the {} result', EXPEDIA_TAB, ORDER),
    TaskFactory('expedia_5', 'https://www.expedia.com', 'Expedia', 'Search for Things to do in {} from {} to {} and click the first result', FROM_DESTINATION, FROM_DATE, TO_DATE),
]

def get_popular_task_factory_by_id(task_id):
    for popular_task in popular_task_factories:
        if popular_task.id == task_id:
            return popular_task
    raise CannotOpenTaskError()

def get_all_popular_task_factories():
    return popular_task_factories